#!/bin/bash
#Templates for creating new projects

# Returns the list of current projects
saint_project_list() {
  # Count the number of projects
  local projectCount=0
  local projects=("${SAINT_PROJECTS_FOLDER}/"*)

  for project in "${projects[@]}"; do
    if [ -f "${project}/.${projName}" ]; then
      let projectCount+=1
    fi
  done

  # Display message based on the number of projects
  if [ "$projectCount" -eq 1 ]; then
    saint_msg "This is the project you have now:"
  else
    saint_msg "These are the projects you have now:"
  fi

  # ${newProjName} over existing projects and list them
  for project in "${projects[@]}"; do
    if [ -d "$project" ]; then
      local projName=$(basename "$project")
      local aliasFile="${project}/.alias"

      if [ -f "$aliasFile" ]; then
        local aliasLine=$(sed -n '3p' "$aliasFile")
        # Extract the alias shortcut (everything between alias and =)
        local aliasShortcut=$(echo "$aliasLine" | sed 's/alias \([^=]*\)=.*/\1/')
        echo "${projName} (${aliasShortcut})"
      fi
    fi
  done
}

saint_get_project_list_from_folders_array() {
  local projects=("$@")
  local project_list=()
  for project in "${projects[@]}"; do
    local projName=$(basename "$project")
    if [ -f "${project}/.${projName}" ]; then
      project_list+=("$projName")
    fi
  done
  echo "${project_list[@]}"
}

saint_add_command() {
  local project_name=$1
  local command="\ \ \ \ \ \ \ \ ${project_name}) ${project_name}_main_commands \"\${projectCommand} \$1\" \${@:2};;"
  if ! grep -q "${command}" ${SAINT_METHODS_MAIN_COMMANDS_FILE}; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '' "/#BEGIN-MAIN-COMMANDS/a\\
${command}
" ${SAINT_METHODS_MAIN_COMMANDS_FILE}
    else
      sed -i "/#BEGIN-MAIN-COMMANDS/a ${command}" ${SAINT_METHODS_MAIN_COMMANDS_FILE}
    fi
    if [ $? -ne 0 ]; then
      saint_msg_status "error" "Failed to add command for project ${YELLOW}${project_name}${NC}."
      return 1
    fi
  fi

}

saint_remove_command() {
  local project_name=$1
  local command="\ \ \ \ \ \ \ \ ${project_name}) ${project_name}_main_commands \"\${projectCommand} \$1\" \${@:2};;"
  if [[ "$OSTYPE" == "darwin"* ]]; then
    sed -i '' "\|${command}|d" ${SAINT_METHODS_MAIN_COMMANDS_FILE}
  else
    sed -i "\|${command}|d" ${SAINT_METHODS_MAIN_COMMANDS_FILE}
  fi
}

saint_validate_project_files() {
  local project_dir=$1
  local project_name=$2
  local mandatory_files=(".alias" ".${project_name}" ".mainCommands" ".variables")
  for file in "${mandatory_files[@]}"; do
    if [ ! -f "${project_dir}/${file}" ]; then
      saint_msg_status "error" "Missing mandatory file ${YELLOW}${file}${NC} in project ${YELLOW}${project_name}${NC}."
      return 1
    fi
  done
  return 0
}

saint_load_project_commands() {
  local project_name

  # Check if the SAINT_PROJECTS_FOLDER exists, if not, create it
  if [ ! -d "${SAINT_PROJECTS_FOLDER}" ]; then
    mkdir -p "${SAINT_PROJECTS_FOLDER}"
  fi

  # Check if the projects directory exists and contains folders
  if [ -d "${SAINT_PROJECTS_FOLDER}" ] && [ "$(find ${SAINT_PROJECTS_FOLDER} -mindepth 1 -type d | head -n 1)" ]; then
    for project_dir in "${SAINT_PROJECTS_FOLDER}/"*; do
      if [ -d "$project_dir" ]; then
        project_name=$(basename "$project_dir")
        if saint_validate_project_files "$project_dir" "$project_name"; then
          saint_add_command "$project_name"
        fi
      fi
    done
  else
    saint_msg_status "info" "No projects found in ${YELLOW}${SAINT_PROJECTS_FOLDER}${NC}."
    return 1
  fi

}

saint_update_project_commands() {
  # Clear commands between BEGIN and END
  sed -i '/#BEGIN-MAINCOMMANDS/,/#END-MAINCOMMANDS/{//!d;}' ${SAINT_METHODS_MAIN_COMMANDS_FILE}

  saint_load_project_commands
  saint_msg_status "success" "Project commands updated successfully."
}

saint_initialize_main_commands() {
  if [ ! -d "${SAINT_TEMP_FOLDER}" ]; then
    mkdir "${SAINT_TEMP_FOLDER}"
  fi;

  if [ ! -f ${SAINT_METHODS_MAIN_COMMANDS_FILE} ] || [ ! -d $SAINT_TEMP_FOLDER ]; then
    local templatePath="${PROJECT_PATH}/templates/saint_temps/.saintMainCommands.txt"
    local fileNameWithPath="${SAINT_METHODS_MAIN_COMMANDS_FILE}"
    # Reading template content
    local templateContent=$(<"$templatePath")
    # Writing writing new contents on the path
    echo "$templateContent" > "$fileNameWithPath"
    saint_update_project_commands && saint_rebuild_help || return 1
  else
    return 1
  fi
}

source "${PROJECT_PATH}/features/methods/saint_help_manager/.saintHelpManager"
source "${PROJECT_PATH}/features/methods/saint_template_manager/.saintTemplateManager"
source "${PROJECT_PATH}/features/methods/saint_project_manager/.saintProjectManager"
