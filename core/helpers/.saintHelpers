#!/bin/bash
# depends on .saint
# Saint Helper Functions
# TODO: Create a reload for docker custom containers update
# TODO: No messages or just important messages mode to activate or disable
saint_msg() {
    msg=$1
    echo -e "ðŸ¤– ${msg}"
}

saint_msg_status() {
  local msg_status=$1
  local message=$2
  if [ "$msg_status" = "success" ]; then
    saint_msg "${GREEN}SUCCESS${NC} ${YELLOW}::${NC} ${message}"
  elif [ "$msg_status" = "error" ]; then
    saint_msg "${RED}ERROR${NC} ${YELLOW}::${NC} ${message}"
  elif [ "$msg_status" = "info" ]; then
    saint_msg "${BLUE}INFO${NC} ${YELLOW}::${NC} ${message}"
  elif [ "$msg_status" = "warning" ]; then
    saint_msg "${YELLOW}WARNING${NC} ${YELLOW}::${NC} ${message}"
  elif [ "$msg_status" = "debug" ]; then
    saint_msg "${MAGENTA}DEBUG${NC} ${YELLOW}::${NC} ${message}"
  fi
}

saint_empty() {
    emptyCommand=$1
    saint_msg_status "error" "${RED}$emptyCommand${NC} command is empty. Try '${projectCommand} ${GREEN}help${NC}'"
};

saint_invalid_command () {
    parentCommand=$1
    invalidCommand=$2
    saint_msg_status "error" "'${RED}$invalidCommand${NC}' is not a valid command in '$parentCommand'."
};

# Function to check if an alias exists
saint_has_alias() {
  local aliasName=$1
  if alias "$aliasName" &>/dev/null; then
    return 0
  else
    return 1
  fi
}

# Maybe this is unecessary, I'm still testing. Idk, you tell me.
# Function to run the command and return to the original directory if it fails
saint_run_command() {
  local orig_dir=$(pwd)
  local command="$1"
  shift
  local args="$@"

  eval "$command $args"
  if [ $? -ne 0 ]; then
    saint_msg_status "error" "${RED}Command failed${NC} :: $command $args"
    cd "$orig_dir"
    return 1
  fi
  cd "$orig_dir"
}

# Function to handle read command for both Bash and Zsh
saint_read() {
    local var_name="$1"
    local prompt="$2"
    local input

    if [ -n "$BASH_VERSION" ]; then
        # For Bash
        read -p "$prompt" input
    elif [ -n "$ZSH_VERSION" ]; then
        # For Zsh
        read -r "$var_name?$prompt"
        return
    fi

    eval "$var_name='$input'"
}

# Function to check if debug mode is active
saint_is_debug_active() {
    [[ -f "${SAINT_DEBUG_FILE}" ]]
}

# Function to show debug message only when debug is active
saint_debug() {
    if saint_is_debug_active; then
        saint_msg_status "debug" "$1"
    fi
}

# Function to reload Saint in current shell
saint_reload() {
    local saint_file=""
    
    # Try to find .saint file
    if [ -f "${HOME}/.saint" ]; then
        saint_file="${HOME}/.saint"
    elif [ -f "${PROJECT_PATH}/.saint" ]; then
        saint_file="${PROJECT_PATH}/.saint"
    else
        saint_msg_status "error" "No .saint file found"
        saint_msg_status "info" "Make sure Saint is properly installed"
        return 1
    fi
    
    saint_msg_status "info" "Reloading Saint from: $saint_file"
    
    # Try to reload Saint
    if source "$saint_file" 2>/dev/null; then
        saint_msg_status "success" "Saint reloaded successfully!"
        saint_msg_status "info" "All functions and aliases are now updated"
        return 0
    else
        saint_msg_status "error" "Failed to reload Saint"
        saint_msg_status "info" "Please restart your terminal or check the installation"
        return 1
    fi
}

saint_read_path() {
  local var_name="$1"
  local prompt="$2"
  local default="$3"
  local input

  if [[ -n "$ZSH_VERSION" ]]; then
    autoload -Uz compinit && compinit

    # Fill with default value
    eval "$var_name=\$default"

    # Don't use `-c`, that causes duplication
    vared -p "$prompt" "$var_name"

    return
  fi

  if [[ -n "$BASH_VERSION" ]]; then
    read -e -i "$default" -p "$prompt" input
  else
    read -p "$prompt" input
  fi

  [[ -z "$input" ]] && input="$default"
  eval "$var_name=\$input"
}


source "${PROJECT_PATH}/core/features/helpers/saint_cd_helpers/.saintCdHelpers"
source "${PROJECT_PATH}/core/features/helpers/saint_docker_helpers/.saintDockerHelpers"
source "${PROJECT_PATH}/core/features/helpers/saint_git_helpers/.saintGitHelpers"
source "${PROJECT_PATH}/core/features/helpers/saint_select_option/.saintSelectOption"
source "${PROJECT_PATH}/core/features/version/.saintAutoUpdate"
source "${PROJECT_PATH}/core/features/version/.saintVersionManager"