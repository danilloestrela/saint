#!/bin/bash
# depends on .saint
# Saint Helper Functions
# TODO: Create a reload for docker custom containers update
# TODO: No messages or just important messages mode to activate or disable
saint_msg() {
    msg=$1
    echo -e "ðŸ¤– ${msg}"
}

saint_empty() {
    emptyCommand=$1
    saint_msg "${RED}$emptyCommand${NC} :: Command is empty. Try '${projectCommand} ${GREEN}help${NC}'"
};

saint_invalid_command () {
    parentCommand=$1
    invalidCommand=$2
    saint_msg "'${RED}$invalidCommand${NC}' :: Not a valid command in '$parentCommand'."
};

# Function to check if an alias exists
saint_has_alias() {
  local aliasName=$1
  if alias "$aliasName" &>/dev/null; then
    return 0
  else
    return 1
  fi
}

# Maybe this is unecessary, I'm still testing. Idk, you tell me.
# Function to run the command and return to the original directory if it fails
saint_run_command() {
  local orig_dir=$(pwd)
  local command="$1"
  shift
  local args="$@"
  
  eval "$command $args"
  if [ $? -ne 0 ]; then
    saint_msg "${RED}Command failed${NC} :: $command $args"
    cd "$orig_dir"
    return 1
  fi
  cd "$orig_dir"
}

saint_print_help() {
    local command=$1
    local description=$2
    local command_color=${3:-$GREEN}  # Default color for command is GREEN
    local description_color=${4:-$YELLOW}  # Default color for description is YELLOW
    local max_command_length=${5:-20}  # Default maximum command length is 20

    printf "${command_color}%-${max_command_length}s${NC} - ${description_color}%s${NC}\n" "${command}" "${description}"
}

source "${PROJECT_PATH}/helper_features/saint_cd_helpers/.saintCdHelpers"
source "${PROJECT_PATH}/helper_features/saint_docker_helpers/.saintDockerHelpers"
source "${PROJECT_PATH}/helper_features/saint_select_option/.saintSelectOption"